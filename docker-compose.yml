services:
  recipes:
    container_name: recipes
    build: ./recipes
    volumes:
      - ./recipes/code:/usr/src/app
    networks:
      - myrecipes
    ports:
      - "${RECIPES_PORT}:${RECIPES_PORT}"
    working_dir: /usr/src/app
    command: bash -c "npm audit && npm install --no-audit && npm run dev"
    environment:
      - RECIPES_DB_HOST=mysql-server-recipes
      - RECIPES_DB_NAME=${RECIPES_DB_NAME}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
    depends_on:
      - mysql-server-recipes
    restart: always

  articles:
    container_name: articles
    build: ./articles
    volumes:
      - ./articles/code:/usr/src/app
    networks:
      - myarticles
    ports:
      - "${ARTICLES_PORT}:${ARTICLES_PORT}"
    working_dir: /usr/src/app
    command: bash -c "npm audit && npm install --no-audit && npm run dev"
    environment:
      - ARTICLES_DB_HOST=mysql-server-articles
      - ARTICLES_DB_NAME=${ARTICLES_DB_NAME}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
    depends_on:
      - mysql-server-articles
    restart: always

  gateway:
    container_name: apigateway
    build: ./apigateway
    volumes:
      - ./apigateway/code:/usr/src/app
    networks:
      - myrecipes
      - myarticles
    ports:
      - "3010:3010"
    working_dir: /usr/src/app
    command: bash -c "npm audit && npm install --no-audit && npm run dev"
    environment:
      - PORT=3010
    depends_on:
      - recipes
      - articles

  mysql-server-recipes:
    container_name: mysql-server-recipes
    image: mysql:8.0
    networks:
      - myrecipes
    environment:
      - MYSQL_DATABASE=${RECIPES_DB_NAME}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}  # Only root password, no MYSQL_USER
    ports:
      - "3306:3306"
    volumes:
      - ./recipes/mysql/initdb:/docker-entrypoint-initdb.d  # Mount init SQL files
      - mysql-data-recipes:/var/lib/mysql

  mysql-server-articles:
    container_name: mysql-server-articles
    image: mysql:8.0
    environment:
      - MYSQL_DATABASE=${ARTICLES_DB_NAME}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}  # Only root password, no MYSQL_USER
    ports:
      - "3309:3306"  # Map container's 3306 to host's 3309
    volumes:
      - ./articles/mysql/initdb:/docker-entrypoint-initdb.d
      - mysql-data-articles:/var/lib/mysql
    networks:
      - myarticles  # Ensure mysql-server-articles is on the same network as articles

  phpmyadmin:
    container_name: phpmyadmin
    image: phpmyadmin:latest
    networks:
      - myrecipes
      - myarticles 
    environment:
      - PMA_HOSTS=mysql-server-recipes,mysql-server-articles
      - PMA_USER=${MYSQL_USER}
      - PMA_PASSWORD=${MYSQL_ROOT_PASSWORD}
    ports:
      - "8080:80"

networks:
  myrecipes:
    driver: bridge
  myarticles:
    driver: bridge

volumes:
  mysql-data-recipes:
  mysql-data-articles:
